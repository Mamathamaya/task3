package tasks;

import java.util.ArrayList;
import java.util.Scanner;

class Account {
    private String userId;
    private String userPin;
    private double balance;
    private ArrayList<String> transactionHistory;

    public Account(String userId, String userPin, double initialBalance) {
        this.userId = userId;
        this.userPin = userPin;
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>();
        addTransaction("Account created with initial balance: $" + initialBalance);
    }

    public String getUserId() {
        return userId;
    }

    public boolean authenticate(String pin) {
        return this.userPin.equals(pin);
    }

    public void deposit(double amount) {
        balance += amount;
        addTransaction("Deposited: $" + amount);
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            addTransaction("Withdrew: $" + amount);
            return true;
        } else {
            return false;
        }
    }

    public boolean transfer(Account targetAccount, double amount) {
        if (amount <= balance) {
            balance -= amount;
            targetAccount.deposit(amount);
            addTransaction("Transferred: $" + amount + " to " + targetAccount.getUserId());
            targetAccount.addTransaction("Received: $" + amount + " from " + userId);
            return true;
        } else {
            return false;
        }
    }

    public double getBalance() {
        return balance;
    }

    public ArrayList<String> getTransactionHistory() {
        return transactionHistory;
    }

    private void addTransaction(String detail) {
        transactionHistory.add(detail);
    }
}

public class ATMInterface {
    private static Scanner scanner = new Scanner(System.in);
    private static Account currentAccount;
    private static Account user1 = new Account("user123", "pin123", 1000.0);
    private static Account user2 = new Account("user456", "pin456", 2000.0);

    public static void main(String[] args) {
        System.out.println("Welcome to the ATM!");
        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter PIN: ");
        String userPin = scanner.nextLine();

        if (authenticateUser(userId, userPin)) {
            System.out.println("Authentication Successful!");
            boolean exit = false;
            while (!exit) {
                showMenu();
                int choice = scanner.nextInt();
                switch (choice) {
                    case 1:
                        showTransactionHistory();
                        break;
                    case 2:
                        withdraw();
                        break;
                    case 3:
                        deposit();
                        break;
                    case 4:
                        transfer();
                        break;
                    case 5:
                        exit = true;
                        System.out.println("Thank you for using the ATM. Goodbye!");
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            }
        } else {
            System.out.println("Authentication Failed. Exiting.");
        }
    }

    private static boolean authenticateUser(String userId, String userPin) {
        if (user1.getUserId().equals(userId) && user1.authenticate(userPin)) {
            currentAccount = user1;
            return true;
        } else if (user2.getUserId().equals(userId) && user2.authenticate(userPin)) {
            currentAccount = user2;
            return true;
        }
        return false;
    }

    private static void showMenu() {
        System.out.println("\nATM Menu:");
        System.out.println("1. Transaction History");
        System.out.println("2. Withdraw");
        System.out.println("3. Deposit");
        System.out.println("4. Transfer");
        System.out.println("5. Quit");
        System.out.print("Choose an option: ");
    }

    private static void showTransactionHistory() {
        System.out.println("\nTransaction History:");
        for (String transaction : currentAccount.getTransactionHistory()) {
            System.out.println(transaction);
        }
    }

    private static void withdraw() {
        System.out.print("Enter amount to withdraw: ");
        double amount = scanner.nextDouble();
        if (currentAccount.withdraw(amount)) {
            System.out.println("Withdrawal successful. Current balance: $" + currentAccount.getBalance());
        } else {
            System.out.println("Insufficient balance. Withdrawal failed.");
        }
    }

    private static void deposit() {
        System.out.print("Enter amount to deposit: ");
        double amount = scanner.nextDouble();
        currentAccount.deposit(amount);
        System.out.println("Deposit successful. Current balance: $" + currentAccount.getBalance());
    }

    private static void transfer() {
        System.out.print("Enter target User ID: ");
        String targetUserId = scanner.next();
        Account targetAccount = null;

        if (user1.getUserId().equals(targetUserId)) {
            targetAccount = user1;
        } else if (user2.getUserId().equals(targetUserId)) {
            targetAccount = user2;
        }

        if (targetAccount != null && targetAccount != currentAccount) {
            System.out.print("Enter amount to transfer: ");
            double amount = scanner.nextDouble();
            if (currentAccount.transfer(targetAccount, amount)) {
                System.out.println("Transfer successful. Current balance: $" + currentAccount.getBalance());
            } else {
                System.out.println("Insufficient balance. Transfer failed.");
            }
        } else {
            System.out.println("Invalid target account. Transfer failed.");
        }
    }
}
